# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from scipy.stats import binned_statistic

#Regression output
from sklearn.linear_model import LinearRegression
import statsmodels.formula.api as smf

os.chdir('C:\\Users\\Sawan\\Desktop\\aster project')
os.getcwd()

health_data = pd.read_table('em_save_final_60.csv', sep=',')

health_data.columns
health_data.dtypes

health_data.isnull().sum().sum()

X = health_data.iloc[:, 2:1069].values
y = health_data.iloc[:, 1070].values

# Encoding categorical data 

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_1 = LabelEncoder()
X[:, 0] = labelencoder_X_1.fit_transform(X[:, 0])
labelencoder_X_2 = LabelEncoder()
X[:, 1] = labelencoder_X_2.fit_transform(X[:, 1])
labelencoder_X_3 = LabelEncoder()
X[:, 2] = labelencoder_X_3.fit_transform(X[:, 2])
labelencoder_X_4 = LabelEncoder()
X[:, 3] = labelencoder_X_4.fit_transform(X[:, 3])

"""
onehotencoder = OneHotEncoder(categorical_features = [1])
X = onehotencoder.fit_transform(X).toarray()
X = X[:, 1:] """

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)


# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_train.shape
y_train.shape
X.shape
# Importing the Keras libraries and packages
import keras
from keras.models import Sequential
from keras.layers.convolutional import Conv1D, MaxPooling1D
from keras.optimizers import SGD
from keras.models import Sequential
from keras.layers import Dense, Flatten

# creating the convolutional neural network
conv = Sequential()
conv.add(Conv1D(20, 4, input_shape = X_train.shape[1:3], activation = 'relu'))
conv.add(MaxPooling1D(2))
conv.add(Flatten())
conv.add(Dense(units = 128, activation = 'relu'))
conv.add(Dense(1, activation = 'sigmoid'))
conv.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])
conv.fit(X_train, y_train, batch_size = 1000, epochs = 100)


# Predicting the Test set results
y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

cm=confusion_matrix(y_test, y_pred)
